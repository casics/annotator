<!doctype html>
<html>
<head>
    <title>LCSH</title>
    <script src="https://code.jquery.com/jquery-1.12.1.min.js" type="text/javascript"></script>
    <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js" type="text/javascript"></script>

    <link  href="http://netdna.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" type="text/css">
    <script src="http://netdna.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" type="text/javascript"></script>

    <link  href="/stylesheets/ui.fancytree.css" rel="stylesheet" type="text/css">
    <script src="/stylesheets/jquery.fancytree.js" type="text/javascript"></script>
    <script src="/stylesheets/jquery.fancytree.dnd.js" type="text/javascript"></script>
    <script src="/stylesheets/jquery.fancytree.edit.js" type="text/javascript"></script>
    <script src="/stylesheets/jquery.fancytree.glyph.js" type="text/javascript"></script>
    <script src="/stylesheets/jquery.fancytree.table.js" type="text/javascript"></script>
    <script src="/stylesheets/jquery.fancytree.wide.js" type="text/javascript"></script>

    <style>
     span.fancytree-title {
       white-space: pre-line;
     }

     body {
       margin-left: 5px;
       margin-right: 5px;
     }

     .inline-list br {
       content: ' ';
     }

     .inline-list br:after {
       content: ', Â ';
     }

    </style>

    <script type="text/javascript">
     // This empty object will act as a set.
     var selections = Object.create(null);

     glyph_opts = {
       map: {
         doc: "glyphicon glyphicon-file",
         docOpen: "glyphicon glyphicon-file",
         checkbox: "glyphicon glyphicon-unchecked",
         checkboxSelected: "glyphicon glyphicon-check",
         checkboxUnknown: "glyphicon glyphicon-share",
         dragHelper: "glyphicon glyphicon-play",
         dropMarker: "glyphicon glyphicon-arrow-right",
         error: "glyphicon glyphicon-warning-sign",
         expanderClosed: "glyphicon glyphicon-menu-right",
         expanderLazy: "glyphicon glyphicon-menu-right",  // glyphicon-plus-sign
         expanderOpen: "glyphicon glyphicon-menu-down",  // glyphicon-collapse-down
         folder: "glyphicon glyphicon-folder-close",
         folderOpen: "glyphicon glyphicon-folder-open",
         loading: "glyphicon glyphicon-refresh glyphicon-spin"
       }
     };

     $(function(){
       // Create the tree inside the <div id="tree"> element.

       $("#tree").fancytree(
         {extensions: ["edit", "glyph"],
          glyph: glyph_opts,
          checkbox: true,
          autoScroll: false,
          clickFolderMode: 2,
          icon: false,
          quickSearch: true,
          table: {checkboxColumnIdx: 1,
                  nodeColumnIdx: 2},
          // This uses the 'json' helper defined in index.js.
          // Make sure to use triple brackets around Handlebars variables
          // or else Handlebars will quote some characters and cause headaches.
          // Lazyloading test:
          // source:  [ {title: 'Test', key: 'sh85012744', lazy: true} ],
          source: {{{json terms}}},
          lazyLoad: function(event, data) {
             var node = data.node;
             data.result = {
               url: '/ajax',
               data: { lcsh: node.key, field: 'narrower', format: 'fancy' },
               cache: false
             };
           },
          select: function(event, data) {
             if (data.node.selected) {
               selections[data.node.key] = true;
             } else if (data.node.key in selections) {
               delete selections[data.node.key];
             }
           },
          })
     });

     function sendSelections() {
       // The way we're using the "selections" object is that the properties
       // we add are the terms.  The property values are irrelevant.  So here,
       // we return an array of only the property keys, i.e., the terms only.
       var terms = [];
       for (var key in selections)
           terms.push(key);
       $.ajax({
         type: 'POST',
         url: '/post-selection',
         // The array has to be passed either as JSON, or inside a {x: y} object.
         data: {terms: terms},
         error: function(jqxhr, options, thrownError) {
           var response;
           if (jqxhr.hasOwnProperty('responseJSON'))
             response = jqxhr.responseJSON;
           else
             response = $.parseJSON(jqxhr.responseText);
           if (response.errorCode === 1) {
             alert(response.errorMessage + '  The page must be reloaded.');
             window.location.replace(response.errorDestinationURL);
           }
         },
         success: function(data) {
           // Without this, a call to render() on the server will not
           // update the page after /post-selection.  It should probably
           // be fixed with a redirect in the server-side code (or something)
           // but I couldn't get another solution to work.  This one does it.
           location = '/';
         }
       });
     };

     function clearSelections() {
       $("#tree").fancytree("getTree").visit(function(node) {
	 node.setSelected(false);
       });
       return false;
     };

     function clearSession() {
       $.ajax({
         type: 'POST',
         url: '/post-clear-session',
         // The array has to be passed either as JSON, or inside a {x: y} object.
         data: {},
         success: function(data) {
           location = '/';
         }
       });
     };

     function removeTopic(term) {
       $.ajax({
         type: 'POST',
         url: '/post-remove-topic',
         // The array has to be passed either as JSON, or inside a {x: y} object.
         data: {term: term},
         error: function(jqxhr, options, thrownError) {
           var response;
           if (jqxhr.hasOwnProperty('responseJSON'))
             response = jqxhr.responseJSON;
           else
             response = $.parseJSON(jqxhr.responseText);
           if (response.errorCode === 1) {
             alert(response.errorMessage + '  The page must be reloaded.');
             window.location.replace(response.errorDestinationURL);
           }
         },
         success: function(data) {
           location = '/';
         }
       });
     };
    </script>
</head>
<body>
  <div class="container">
    {{{body}}}
  </div>
</body>
</html>
